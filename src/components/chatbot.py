import streamlit as st
import pandas as pd
from typing import Dict, Any, Optional

class Chatbot:
    def __init__(self, llm_integration=None):
        self.llm_integration = llm_integration
        self.cached_data = None  # Cache local dos dados
        self.llm_config = {
            "provider": "groq",
            "temperature": 0.0,
            "max_tokens": 500
        }
        
    def set_llm_config(self, provider="groq", temperature=0.0, max_tokens=500):
        """Define configura√ß√µes do LLM."""
        self.llm_config = {
            "provider": provider,
            "temperature": temperature,
            "max_tokens": max_tokens
        }
        
    def initialize_chat_state(self):
        """Inicializa o estado do chat."""
        if "messages" not in st.session_state:
            st.session_state.messages = []
    
    def _get_cached_data(self) -> pd.DataFrame:
        """Obt√©m dados em cache para an√°lises r√°pidas."""
        if self.cached_data is None:
            try:
                # Usa o paginador se dispon√≠vel
                if (hasattr(self.llm_integration, 'database') and 
                    self.llm_integration.database.is_cloud and 
                    self.llm_integration.database.supabase):
                    
                    try:
                        from src.utils.supabase_utils import SupabasePaginator
                        paginator = SupabasePaginator(self.llm_integration.database.supabase)
                        self.cached_data = paginator.get_all_records()
                        print(f"‚úÖ Cache carregado: {len(self.cached_data)} registros")
                    except ImportError:
                        # Fallback sem paginador
                        result = self.llm_integration.database.supabase.table('ibama_infracao').select('*').limit(50000).execute()
                        self.cached_data = pd.DataFrame(result.data)
                else:
                    # DuckDB ou erro
                    self.cached_data = pd.DataFrame()
                    
            except Exception as e:
                print(f"Erro ao carregar cache: {e}")
                self.cached_data = pd.DataFrame()
        
        return self.cached_data
    
    def _answer_with_data_analysis(self, question: str) -> Dict[str, Any]:
        """Responde perguntas usando an√°lise direta dos dados."""
        question_lower = question.lower()
        
        # Carrega dados
        df = self._get_cached_data()
        
        if df.empty:
            return {
                "answer": "‚ùå N√£o foi poss√≠vel carregar os dados para an√°lise.",
                "source": "error"
            }
        
        try:
            # An√°lises espec√≠ficas por UF e tipo
            if any(keyword in question_lower for keyword in ["amazonas", "rio grande do sul", "s√£o paulo", "minas gerais"]) and any(keyword in question_lower for keyword in ["pesca", "fauna", "flora"]):
                return self._analyze_specific_region_type(df, question)
            
            # An√°lises de pessoas f√≠sicas vs empresas
            elif any(keyword in question_lower for keyword in ["pessoas f√≠sicas", "empresas", "infrator", "quem mais"]):
                return self._analyze_top_offenders_detailed(df, question)
            
            # Respostas para perguntas espec√≠ficas sobre dados
            elif any(keyword in question_lower for keyword in ["estados", "uf", "5 estados", "top estados"]):
                return self._analyze_top_states(df, question)
            
            elif any(keyword in question_lower for keyword in ["munic√≠pios", "cidades", "top munic√≠pios"]):
                return self._analyze_top_municipalities(df, question)
            
            elif any(keyword in question_lower for keyword in ["valor", "multa", "total", "dinheiro"]):
                return self._analyze_fines(df, question)
            
            elif any(keyword in question_lower for keyword in ["tipo", "infra√ß√£o", "categoria"]) and "o que" not in question_lower:
                return self._analyze_infraction_types(df, question)
            
            elif any(keyword in question_lower for keyword in ["ano", "tempo", "per√≠odo", "quando"]):
                return self._analyze_by_year(df, question)
            
            elif any(keyword in question_lower for keyword in ["total", "quantos", "n√∫mero"]) and "o que" not in question_lower:
                return self._analyze_totals(df, question)
            
            # Explica√ß√µes conceituais (n√£o an√°lise de dados)
            elif any(keyword in question_lower for keyword in ["o que √©", "o que s√£o", "definir", "explicar"]):
                return self._explain_concepts_or_entities(question)
            
            # Respostas sobre conceitos espec√≠ficos do IBAMA
            elif any(keyword in question_lower for keyword in ["biopirataria", "org. gen.", "modifica√ß√£o gen√©tica", "organismo"]):
                return self._explain_concepts(question)
            
            elif any(keyword in question_lower for keyword in ["gravidade", "multa leve", "multa grave"]):
                return self._analyze_gravity(df, question)
            
            elif any(keyword in question_lower for keyword in ["fauna", "flora", "animal", "planta"]) and "o que" not in question_lower:
                return self._analyze_fauna_flora(df, question)
            
            else:
                # Resposta gen√©rica
                return self._analyze_general(df, question)
        
        except Exception as e:
            return {
                "answer": f"‚ùå Erro na an√°lise: {str(e)}",
                "source": "error"
            }
    
    def _analyze_top_states(self, df: pd.DataFrame, question: str) -> Dict[str, Any]:
        """Analisa os estados com mais infra√ß√µes usando contagem correta."""
        try:
            if 'UF' not in df.columns:
                return {"answer": "‚ùå Coluna UF n√£o encontrada nos dados.", "source": "error"}
            
            # Conta infra√ß√µes √∫nicas por estado se NUM_AUTO_INFRACAO dispon√≠vel
            if 'NUM_AUTO_INFRACAO' in df.columns:
                state_counts = df.groupby('UF')['NUM_AUTO_INFRACAO'].nunique().sort_values(ascending=False)
                method_info = "infra√ß√µes √∫nicas"
            else:
                # Fallback para contagem de registros
                state_counts = df['UF'].value_counts()
                method_info = "registros (pode incluir duplicatas)"
            
            # Extrai n√∫mero do top (padr√£o 5)
            import re
            numbers = re.findall(r'\d+', question)
            top_n = int(numbers[0]) if numbers else 5
            top_n = min(top_n, 15)  # M√°ximo 15
            
            top_states = state_counts.head(top_n)
            
            # Formata resposta
            answer = f"**üèÜ Top {top_n} Estados com Mais Infra√ß√µes:**\n\n"
            for i, (uf, count) in enumerate(top_states.items(), 1):
                percentage = (count / state_counts.sum()) * 100
                answer += f"{i}. **{uf}**: {count:,} infra√ß√µes ({percentage:.1f}%)\n"
            
            answer += f"\nüìä Total analisado: {state_counts.sum():,} {method_info}"
            
            return {"answer": answer, "source": "data_analysis"}
            
        except Exception as e:
            return {"answer": f"‚ùå Erro ao analisar estados: {e}", "source": "error"}
    
    def _analyze_top_municipalities(self, df: pd.DataFrame, question: str) -> Dict[str, Any]:
        """Analisa os munic√≠pios com mais infra√ß√µes usando contagem correta."""
        try:
            # Verifica colunas dispon√≠veis
            required_base_cols = ['UF', 'MUNICIPIO']
            if not all(col in df.columns for col in required_base_cols):
                return {"answer": "‚ùå Colunas necess√°rias n√£o encontradas.", "source": "error"}
            
            # Remove valores vazios
            df_clean = df[
                df['MUNICIPIO'].notna() & 
                df['UF'].notna() &
                (df['MUNICIPIO'] != '') & 
                (df['UF'] != '')
            ].copy()
            
            if df_clean.empty:
                return {"answer": "‚ùå Nenhum dado v√°lido encontrado.", "source": "error"}
            
            # M√©todo preferido: usar c√≥digo do munic√≠pio se dispon√≠vel
            if 'COD_MUNICIPIO' in df.columns and 'NUM_AUTO_INFRACAO' in df.columns:
                df_clean = df_clean[
                    df_clean['COD_MUNICIPIO'].notna() & 
                    df_clean['NUM_AUTO_INFRACAO'].notna() &
                    (df_clean['COD_MUNICIPIO'] != '') &
                    (df_clean['NUM_AUTO_INFRACAO'] != '')
                ]
                
                if df_clean.empty:
                    return {"answer": "‚ùå C√≥digos de munic√≠pio n√£o dispon√≠veis.", "source": "error"}
                
                # Conta INFRA√á√ïES √öNICAS por c√≥digo do munic√≠pio
                muni_data = df_clean.groupby(['COD_MUNICIPIO', 'MUNICIPIO', 'UF'])['NUM_AUTO_INFRACAO'].nunique().reset_index()
                muni_data.rename(columns={'NUM_AUTO_INFRACAO': 'count'}, inplace=True)
                muni_data = muni_data.sort_values('count', ascending=False)
                
                method_info = "contagem por c√≥digo IBGE + infra√ß√µes √∫nicas"
                
            elif 'NUM_AUTO_INFRACAO' in df.columns:
                # Fallback: usar nome do munic√≠pio com contagem √∫nica
                df_clean = df_clean[
                    df_clean['NUM_AUTO_INFRACAO'].notna() &
                    (df_clean['NUM_AUTO_INFRACAO'] != '')
                ]
                
                muni_data = df_clean.groupby(['MUNICIPIO', 'UF'])['NUM_AUTO_INFRACAO'].nunique().reset_index()
                muni_data.rename(columns={'NUM_AUTO_INFRACAO': 'count'}, inplace=True)
                muni_data = muni_data.sort_values('count', ascending=False)
                
                method_info = "contagem por nome + infra√ß√µes √∫nicas"
                
            else:
                # √öltimo fallback: contagem simples de registros
                muni_data = df_clean.groupby(['MUNICIPIO', 'UF']).size().reset_index(name='count')
                muni_data = muni_data.sort_values('count', ascending=False)
                
                method_info = "contagem por nome (pode incluir duplicatas)"
            
            # Extrai n√∫mero do top (padr√£o 5)
            import re
            numbers = re.findall(r'\d+', question)
            top_n = int(numbers[0]) if numbers else 5
            top_n = min(top_n, 15)  # M√°ximo 15
            
            top_munis = muni_data.head(top_n)
            
            answer = f"**üèôÔ∏è Top {top_n} Munic√≠pios com Mais Infra√ß√µes:**\n\n"
            for i, row in enumerate(top_munis.itertuples(), 1):
                suffix = " √∫nicas" if "√∫nicas" in method_info else ""
                answer += f"{i}. **{row.MUNICIPIO} ({row.UF})**: {row.count:,} infra√ß√µes{suffix}\n"
            
            answer += f"\nüìä Total de munic√≠pios √∫nicos: {len(muni_data):,}"
            answer += f"\n*M√©todo: {method_info}*"
            
            return {"answer": answer, "source": "data_analysis"}
            
        except Exception as e:
            return {"answer": f"‚ùå Erro ao analisar munic√≠pios: {e}", "source": "error"}
    
    def _analyze_fines(self, df: pd.DataFrame, question: str) -> Dict[str, Any]:
        """Analisa valores de multas."""
        try:
            if 'VAL_AUTO_INFRACAO' not in df.columns:
                return {"answer": "‚ùå Coluna de valores n√£o encontrada.", "source": "error"}
            
            # Converte valores
            df['VAL_NUMERIC'] = pd.to_numeric(
                df['VAL_AUTO_INFRACAO'].astype(str).str.replace(',', '.'), 
                errors='coerce'
            )
            
            df_valid = df[df['VAL_NUMERIC'].notna()]
            
            if df_valid.empty:
                return {"answer": "‚ùå Nenhum valor v√°lido encontrado.", "source": "error"}
            
            # Verifica se a pergunta √© espec√≠fica sobre a maior multa
            question_lower = question.lower()
            if any(keyword in question_lower for keyword in ["maior multa", "quem", "pessoa", "empresa", "infrator"]):
                # Encontra a maior multa e quem foi multado
                max_idx = df_valid['VAL_NUMERIC'].idxmax()
                max_row = df_valid.loc[max_idx]
                max_value = max_row['VAL_NUMERIC']
                
                # Informa√ß√µes do infrator
                infrator = max_row.get('NOME_INFRATOR', 'N√£o informado')
                uf = max_row.get('UF', 'N/A')
                municipio = max_row.get('MUNICIPIO', 'N/A')
                tipo_infracao = max_row.get('TIPO_INFRACAO', 'N√£o especificado')
                data = max_row.get('DAT_HORA_AUTO_INFRACAO', 'N/A')
                
                def format_currency(value):
                    if value >= 1_000_000_000:
                        return f"R$ {value/1_000_000_000:.1f} bilh√µes"
                    elif value >= 1_000_000:
                        return f"R$ {value/1_000_000:.1f} milh√µes"
                    else:
                        return f"R$ {value:,.2f}"
                
                answer = f"**üí∞ Maior Multa Aplicada:**\n\n"
                answer += f"‚Ä¢ **Valor**: {format_currency(max_value)}\n"
                answer += f"‚Ä¢ **Infrator**: {infrator}\n"
                answer += f"‚Ä¢ **Local**: {municipio} - {uf}\n"
                answer += f"‚Ä¢ **Tipo de Infra√ß√£o**: {tipo_infracao}\n"
                if data != 'N/A':
                    try:
                        data_formatada = pd.to_datetime(data).strftime('%d/%m/%Y')
                        answer += f"‚Ä¢ **Data**: {data_formatada}\n"
                    except:
                        answer += f"‚Ä¢ **Data**: {data}\n"
                
                return {"answer": answer, "source": "data_analysis"}
            
            else:
                # An√°lise geral dos valores
                total_value = df_valid['VAL_NUMERIC'].sum()
                avg_value = df_valid['VAL_NUMERIC'].mean()
                max_value = df_valid['VAL_NUMERIC'].max()
                
                def format_currency(value):
                    if value >= 1_000_000_000:
                        return f"R$ {value/1_000_000_000:.1f} bilh√µes"
                    elif value >= 1_000_000:
                        return f"R$ {value/1_000_000:.1f} milh√µes"
                    else:
                        return f"R$ {value:,.2f}"
                
                answer = f"**üí∞ An√°lise de Valores de Multas:**\n\n"
                answer += f"‚Ä¢ **Total**: {format_currency(total_value)}\n"
                answer += f"‚Ä¢ **M√©dia por infra√ß√£o**: {format_currency(avg_value)}\n"
                answer += f"‚Ä¢ **Maior multa**: {format_currency(max_value)}\n"
                answer += f"‚Ä¢ **Infra√ß√µes com valor**: {len(df_valid):,} de {len(df):,}\n"
                
                return {"answer": answer, "source": "data_analysis"}
            
        except Exception as e:
            return {"answer": f"‚ùå Erro ao analisar valores: {e}", "source": "error"}
    
    def _analyze_infraction_types(self, df: pd.DataFrame, question: str) -> Dict[str, Any]:
        """Analisa tipos de infra√ß√µes."""
        try:
            if 'TIPO_INFRACAO' not in df.columns:
                return {"answer": "‚ùå Coluna de tipos n√£o encontrada.", "source": "error"}
            
            df_clean = df[df['TIPO_INFRACAO'].notna() & (df['TIPO_INFRACAO'] != '')]
            
            # Conta infra√ß√µes √∫nicas por tipo se NUM_AUTO_INFRACAO dispon√≠vel
            if 'NUM_AUTO_INFRACAO' in df_clean.columns:
                type_counts = df_clean.groupby('TIPO_INFRACAO')['NUM_AUTO_INFRACAO'].nunique().sort_values(ascending=False).head(10)
                method_info = "infra√ß√µes √∫nicas"
            else:
                type_counts = df_clean['TIPO_INFRACAO'].value_counts().head(10)
                method_info = "registros"
            
            answer = f"**üìã Principais Tipos de Infra√ß√µes ({method_info}):**\n\n"
            for i, (tipo, count) in enumerate(type_counts.items(), 1):
                percentage = (count / type_counts.sum()) * 100
                answer += f"{i}. **{tipo.title()}**: {count:,} casos ({percentage:.1f}%)\n"
            
            return {"answer": answer, "source": "data_analysis"}
            
        except Exception as e:
            return {"answer": f"‚ùå Erro ao analisar tipos: {e}", "source": "error"}
    
    def _analyze_by_year(self, df: pd.DataFrame, question: str) -> Dict[str, Any]:
        """Analisa dados por ano."""
        try:
            if 'DAT_HORA_AUTO_INFRACAO' not in df.columns:
                return {"answer": "‚ùå Coluna de data n√£o encontrada.", "source": "error"}
            
            df['DATE'] = pd.to_datetime(df['DAT_HORA_AUTO_INFRACAO'], errors='coerce')
            df_with_date = df[df['DATE'].notna()]
            
            # Conta infra√ß√µes √∫nicas por ano se NUM_AUTO_INFRACAO dispon√≠vel
            if 'NUM_AUTO_INFRACAO' in df_with_date.columns:
                year_counts = df_with_date.groupby(df_with_date['DATE'].dt.year)['NUM_AUTO_INFRACAO'].nunique().sort_index()
                method_info = "infra√ß√µes √∫nicas"
            else:
                year_counts = df_with_date['DATE'].dt.year.value_counts().sort_index()
                method_info = "registros"
            
            answer = f"**üìÖ Infra√ß√µes por Ano ({method_info}):**\n\n"
            for year, count in year_counts.tail(5).items():
                answer += f"‚Ä¢ **{int(year)}**: {count:,} infra√ß√µes\n"
            
            answer += f"\nüìä Total com data v√°lida: {len(df_with_date):,}"
            
            return {"answer": answer, "source": "data_analysis"}
            
        except Exception as e:
            return {"answer": f"‚ùå Erro ao analisar por ano: {e}", "source": "error"}
    
    def _analyze_totals(self, df: pd.DataFrame, question: str) -> Dict[str, Any]:
        """Analisa totais gerais usando contagem correta."""
        try:
            # Conta infra√ß√µes √∫nicas se NUM_AUTO_INFRACAO dispon√≠vel
            if 'NUM_AUTO_INFRACAO' in df.columns:
                total_records = df['NUM_AUTO_INFRACAO'].nunique()
                records_method = "infra√ß√µes √∫nicas"
            else:
                total_records = len(df)
                records_method = "registros (pode incluir duplicatas)"
            
            total_states = df['UF'].nunique() if 'UF' in df.columns else 0
            
            # Usa c√≥digo do munic√≠pio se dispon√≠vel (mais preciso)
            if 'COD_MUNICIPIO' in df.columns:
                total_municipalities = df['COD_MUNICIPIO'].nunique()
                municipality_method = "por c√≥digo IBGE"
            elif 'MUNICIPIO' in df.columns:
                total_municipalities = df['MUNICIPIO'].nunique()
                municipality_method = "por nome (pode haver duplicatas)"
            else:
                total_municipalities = 0
                municipality_method = "n√£o dispon√≠vel"
            
            answer = "**üìä Resumo Geral dos Dados:**\n\n"
            answer += f"‚Ä¢ **Total de infra√ß√µes**: {total_records:,} ({records_method})\n"
            answer += f"‚Ä¢ **Estados envolvidos**: {total_states}\n"
            answer += f"‚Ä¢ **Munic√≠pios afetados**: {total_municipalities:,}\n"
            
            if municipality_method != "n√£o dispon√≠vel":
                answer += f"  *(contagem {municipality_method})*\n"
            
            # Per√≠odo dos dados
            if 'DAT_HORA_AUTO_INFRACAO' in df.columns:
                df['DATE'] = pd.to_datetime(df['DAT_HORA_AUTO_INFRACAO'], errors='coerce')
                df_with_date = df[df['DATE'].notna()]
                if not df_with_date.empty:
                    min_year = df_with_date['DATE'].dt.year.min()
                    max_year = df_with_date['DATE'].dt.year.max()
                    answer += f"‚Ä¢ **Per√≠odo**: {int(min_year)} a {int(max_year)}\n"
            
            return {"answer": answer, "source": "data_analysis"}
            
        except Exception as e:
            return {"answer": f"‚ùå Erro ao calcular totais: {e}", "source": "error"}
    
    def _explain_concepts(self, question: str) -> Dict[str, Any]:
        """Explica conceitos relacionados √†s infra√ß√µes ambientais."""
        question_lower = question.lower()
        
        if any(keyword in question_lower for keyword in ["org. gen.", "modifica√ß√£o gen√©tica", "organismo geneticamente modificado"]):
            answer = """**üß¨ Organismos Geneticamente Modificados (OGM):**

**Defini√ß√£o:** Organismos cujo material gen√©tico foi alterado atrav√©s de t√©cnicas de engenharia gen√©tica.

**No contexto do IBAMA:**
‚Ä¢ Controle da introdu√ß√£o de OGMs no meio ambiente
‚Ä¢ Licenciamento para pesquisa e cultivo
‚Ä¢ Monitoramento de impactos ambientais
‚Ä¢ Fiscaliza√ß√£o do transporte e armazenamento

**Principais infra√ß√µes:**
‚Ä¢ Cultivo sem autoriza√ß√£o
‚Ä¢ Transporte irregular
‚Ä¢ Falta de isolamento adequado
‚Ä¢ N√£o cumprimento de medidas de biosseguran√ßa"""

        elif "biopirataria" in question_lower:
            answer = """**üè¥‚Äç‚ò†Ô∏è Biopirataria:**

**Defini√ß√£o:** Apropria√ß√£o ilegal de recursos biol√≥gicos e conhecimentos tradicionais sem autoriza√ß√£o ou compensa√ß√£o.

**Principais modalidades:**
‚Ä¢ **Coleta ilegal** de esp√©cimes da fauna e flora
‚Ä¢ **Extra√ß√£o n√£o autorizada** de material gen√©tico
‚Ä¢ **Uso comercial** sem licen√ßa de recursos naturais
‚Ä¢ **Apropria√ß√£o** de conhecimentos de comunidades tradicionais

**No contexto do IBAMA:**
‚Ä¢ Fiscaliza√ß√£o da coleta cient√≠fica
‚Ä¢ Controle de acesso ao patrim√¥nio gen√©tico
‚Ä¢ Licenciamento para pesquisa biol√≥gica
‚Ä¢ Prote√ß√£o de conhecimentos tradicionais

**Penalidades:**
‚Ä¢ Multas de R$ 200 a R$ 2 milh√µes
‚Ä¢ Apreens√£o do material coletado
‚Ä¢ Processo criminal
‚Ä¢ Repara√ß√£o de danos ambientais"""

        else:
            # Resposta gen√©rica sobre conceitos
            answer = """**üìö Conceitos Ambientais no IBAMA:**

**Principais √°reas de atua√ß√£o:**
‚Ä¢ **Biopirataria:** Apropria√ß√£o ilegal de recursos biol√≥gicos
‚Ä¢ **OGMs:** Controle de organismos geneticamente modificados  
‚Ä¢ **Fauna:** Prote√ß√£o de animais silvestres
‚Ä¢ **Flora:** Conserva√ß√£o da vegeta√ß√£o nativa
‚Ä¢ **Recursos h√≠dricos:** Gest√£o de √°guas
‚Ä¢ **Unidades de conserva√ß√£o:** Prote√ß√£o de √°reas especiais

**Tipos de infra√ß√£o:**
‚Ä¢ Leves, graves e grav√≠ssimas
‚Ä¢ Multas de R$ 50 a R$ 50 milh√µes
‚Ä¢ Medidas administrativas
‚Ä¢ Responsabiliza√ß√£o criminal"""

        return {"answer": answer, "source": "knowledge_base"}
    
    def _analyze_gravity(self, df: pd.DataFrame, question: str) -> Dict[str, Any]:
        """Analisa distribui√ß√£o por gravidade das infra√ß√µes."""
        try:
            if 'GRAVIDADE_INFRACAO' not in df.columns:
                return {"answer": "‚ùå Coluna de gravidade n√£o encontrada nos dados.", "source": "error"}
            
            df_clean = df[df['GRAVIDADE_INFRACAO'].notna() & (df['GRAVIDADE_INFRACAO'] != '')]
            
            # Conta infra√ß√µes √∫nicas por gravidade se NUM_AUTO_INFRACAO dispon√≠vel
            if 'NUM_AUTO_INFRACAO' in df_clean.columns:
                gravity_counts = df_clean.groupby('GRAVIDADE_INFRACAO')['NUM_AUTO_INFRACAO'].nunique()
                method_info = "infra√ß√µes √∫nicas"
            else:
                gravity_counts = df_clean['GRAVIDADE_INFRACAO'].value_counts()
                method_info = "registros"
            
            answer = f"**‚öñÔ∏è Distribui√ß√£o por Gravidade ({method_info}):**\n\n"
            
            for gravity, count in gravity_counts.items():
                percentage = (count / gravity_counts.sum()) * 100
                
                # Emoji por gravidade
                if "leve" in gravity.lower():
                    emoji = "üü¢"
                elif "grave" in gravity.lower() and "grav√≠ssima" not in gravity.lower():
                    emoji = "üü°"
                elif "grav√≠ssima" in gravity.lower():
                    emoji = "üî¥"
                else:
                    emoji = "‚ö´"
                
                answer += f"{emoji} **{gravity.title()}**: {count:,} infra√ß√µes ({percentage:.1f}%)\n"
            
            answer += f"\nüìä Total analisado: {gravity_counts.sum():,} {method_info}"
            
            # Explica√ß√£o das gravidades
            answer += "\n\n**‚ÑπÔ∏è Classifica√ß√£o:**\n"
            answer += "üü¢ **Leves:** Multa de R$ 50 a R$ 10.000\n"
            answer += "üü° **Graves:** Multa de R$ 10.001 a R$ 1.000.000\n"
            answer += "üî¥ **Grav√≠ssimas:** Multa de R$ 1.000.001 a R$ 50.000.000"
            
            return {"answer": answer, "source": "data_analysis"}
            
        except Exception as e:
            return {"answer": f"‚ùå Erro ao analisar gravidade: {e}", "source": "error"}
    
    def _analyze_fauna_flora(self, df: pd.DataFrame, question: str) -> Dict[str, Any]:
        """Analisa infra√ß√µes relacionadas √† fauna e flora."""
        try:
            if 'TIPO_INFRACAO' not in df.columns:
                return {"answer": "‚ùå Coluna de tipos de infra√ß√£o n√£o encontrada.", "source": "error"}
            
            df_clean = df[df['TIPO_INFRACAO'].notna() & (df['TIPO_INFRACAO'] != '')]
            
            # Busca por termos relacionados √† fauna e flora
            fauna_terms = ['fauna', 'animal', 'ca√ßa', 'pesca', 'peixe', 'ave', 'mam√≠fero']
            flora_terms = ['flora', 'planta', '√°rvore', 'madeira', 'vegetal', 'floresta']
            
            fauna_mask = df_clean['TIPO_INFRACAO'].str.contains(
                '|'.join(fauna_terms), case=False, na=False
            )
            flora_mask = df_clean['TIPO_INFRACAO'].str.contains(
                '|'.join(flora_terms), case=False, na=False
            )
            
            # Conta infra√ß√µes √∫nicas se NUM_AUTO_INFRACAO dispon√≠vel
            if 'NUM_AUTO_INFRACAO' in df_clean.columns:
                fauna_count = df_clean[fauna_mask]['NUM_AUTO_INFRACAO'].nunique()
                flora_count = df_clean[flora_mask]['NUM_AUTO_INFRACAO'].nunique()
                method_info = "infra√ß√µes √∫nicas"
            else:
                fauna_count = fauna_mask.sum()
                flora_count = flora_mask.sum()
                method_info = "registros"
            
            answer = f"**üåø An√°lise de Infra√ß√µes Fauna e Flora ({method_info}):**\n\n"
            
            if fauna_count > 0:
                answer += f"üêæ **Infra√ß√µes contra Fauna**: {fauna_count:,} casos\n"
                if 'NUM_AUTO_INFRACAO' in df_clean.columns:
                    fauna_types = df_clean[fauna_mask].groupby('TIPO_INFRACAO')['NUM_AUTO_INFRACAO'].nunique().nlargest(5)
                else:
                    fauna_types = df_clean[fauna_mask]['TIPO_INFRACAO'].value_counts().head(5)
                for tipo, count in fauna_types.items():
                    answer += f"   ‚Ä¢ {tipo.title()}: {count:,}\n"
                answer += "\n"
            
            if flora_count > 0:
                answer += f"üå≥ **Infra√ß√µes contra Flora**: {flora_count:,} casos\n"
                if 'NUM_AUTO_INFRACAO' in df_clean.columns:
                    flora_types = df_clean[flora_mask].groupby('TIPO_INFRACAO')['NUM_AUTO_INFRACAO'].nunique().nlargest(5)
                else:
                    flora_types = df_clean[flora_mask]['TIPO_INFRACAO'].value_counts().head(5)
                for tipo, count in flora_types.items():
                    answer += f"   ‚Ä¢ {tipo.title()}: {count:,}\n"
                answer += "\n"
            
            if 'NUM_AUTO_INFRACAO' in df_clean.columns:
                other_count = df_clean['NUM_AUTO_INFRACAO'].nunique() - fauna_count - flora_count
            else:
                other_count = len(df_clean) - fauna_count - flora_count
            
            answer += f"‚öñÔ∏è **Outras infra√ß√µes**: {other_count:,} casos\n"
            
            total_analyzed = fauna_count + flora_count + other_count
            answer += f"\nüìä Total analisado: {total_analyzed:,} {method_info}"
            
            return {"answer": answer, "source": "data_analysis"}
            
        except Exception as e:
            return {"answer": f"‚ùå Erro ao analisar fauna e flora: {e}", "source": "error"}
    
    def _analyze_specific_region_type(self, df: pd.DataFrame, question: str) -> Dict[str, Any]:
        """Analisa infra√ß√µes espec√≠ficas por regi√£o e tipo."""
        try:
            question_lower = question.lower()
            
            # Identifica UF
            uf_map = {
                "amazonas": "AM", "rio grande do sul": "RS", "s√£o paulo": "SP", 
                "minas gerais": "MG", "bahia": "BA", "paran√°": "PR"
            }
            
            target_uf = None
            for state_name, uf_code in uf_map.items():
                if state_name in question_lower:
                    target_uf = uf_code
                    break
            
            if not target_uf:
                return {"answer": "‚ùå Estado n√£o identificado na pergunta.", "source": "error"}
            
            # Filtra por UF
            df_uf = df[df['UF'] == target_uf] if 'UF' in df.columns else df
            
            if df_uf.empty:
                return {"answer": f"‚ùå Nenhum registro encontrado para {target_uf}.", "source": "error"}
            
            # Identifica tipo de infra√ß√£o
            infraction_type = None
            if "pesca" in question_lower:
                df_filtered = df_uf[df_uf['TIPO_INFRACAO'].str.contains('pesca', case=False, na=False)]
                infraction_type = "Pesca"
            elif "fauna" in question_lower:
                df_filtered = df_uf[df_uf['TIPO_INFRACAO'].str.contains('fauna', case=False, na=False)]
                infraction_type = "Fauna"
            elif "flora" in question_lower:
                df_filtered = df_uf[df_uf['TIPO_INFRACAO'].str.contains('flora', case=False, na=False)]
                infraction_type = "Flora"
            else:
                df_filtered = df_uf
                infraction_type = "Todas"
            
            if df_filtered.empty:
                return {"answer": f"‚ùå Nenhuma infra√ß√£o de {infraction_type} encontrada em {target_uf}.", "source": "error"}
            
            # Filtra por ano se especificado
            if "2024" in question_lower:
                df_filtered['DATE'] = pd.to_datetime(df_filtered['DAT_HORA_AUTO_INFRACAO'], errors='coerce')
                df_filtered = df_filtered[df_filtered['DATE'].dt.year == 2024]
            
            if df_filtered.empty:
                return {"answer": f"‚ùå Nenhum registro encontrado para os crit√©rios especificados.", "source": "error"}
            
            # Analisa infratores
            if 'NOME_INFRATOR' not in df_filtered.columns:
                return {"answer": "‚ùå Coluna de infratores n√£o encontrada.", "source": "error"}
            
            # Identifica se quer pessoas f√≠sicas ou empresas
            if "pessoas f√≠sicas" in question_lower:
                # Filtra pessoas f√≠sicas (heur√≠stica: nomes com espa√ßos, sem LTDA/SA)
                mask = ~df_filtered['NOME_INFRATOR'].str.contains(r'(LTDA|S\.A\.|S/A|EMPRESA|CIA|COMPANHIA)', case=False, na=False)
                df_people = df_filtered[mask & df_filtered['NOME_INFRATOR'].str.contains(' ', na=False)]
                entity_type = "Pessoas F√≠sicas"
            elif "empresas" in question_lower:
                # Filtra empresas (cont√©m LTDA, SA, etc.)
                mask = df_filtered['NOME_INFRATOR'].str.contains(r'(LTDA|S\.A\.|S/A|EMPRESA|CIA|COMPANHIA)', case=False, na=False)
                df_people = df_filtered[mask]
                entity_type = "Empresas"
            else:
                df_people = df_filtered
                entity_type = "Infratores"
            
            if df_people.empty:
                return {"answer": f"‚ùå Nenhuma {entity_type.lower()} encontrada para {infraction_type} em {target_uf}.", "source": "error"}
            
            # Top infratores com contagem correta
            import re
            numbers = re.findall(r'\d+', question_lower)
            top_n = int(numbers[0]) if numbers else 5
            
            # Conta infra√ß√µes √∫nicas por infrator se NUM_AUTO_INFRACAO dispon√≠vel
            if 'NUM_AUTO_INFRACAO' in df_people.columns:
                top_offenders = df_people.groupby('NOME_INFRATOR')['NUM_AUTO_INFRACAO'].nunique().nlargest(top_n)
                method_info = "infra√ß√µes √∫nicas"
            else:
                top_offenders = df_people['NOME_INFRATOR'].value_counts().head(top_n)
                method_info = "registros"
            
            answer = f"**üéØ Top {top_n} {entity_type} - {infraction_type} em {target_uf}:**\n\n"
            
            for i, (name, count) in enumerate(top_offenders.items(), 1):
                # Trunca nomes muito longos
                display_name = name[:50] + "..." if len(name) > 50 else name
                suffix = " √∫nicas" if "√∫nicas" in method_info else ""
                answer += f"{i}. **{display_name.title()}**: {count:,} infra√ß√µes{suffix}\n"
            
            answer += f"\nüìä Total de {entity_type.lower()}: {df_people['NOME_INFRATOR'].nunique():,}"
            answer += f"\nüìä Total de infra√ß√µes de {infraction_type}: {len(df_people):,}"
            answer += f"\n*M√©todo: {method_info}*"
            
            return {"answer": answer, "source": "data_analysis"}
            
        except Exception as e:
            return {"answer": f"‚ùå Erro na an√°lise espec√≠fica: {e}", "source": "error"}
    
    def _analyze_top_offenders_detailed(self, df: pd.DataFrame, question: str) -> Dict[str, Any]:
        """An√°lise detalhada de infratores."""
        try:
            question_lower = question.lower()
            
            if 'NOME_INFRATOR' not in df.columns:
                return {"answer": "‚ùå Coluna de infratores n√£o encontrada.", "source": "error"}
            
            df_clean = df[df['NOME_INFRATOR'].notna() & (df['NOME_INFRATOR'] != '')]
            
            # Determina se quer pessoas f√≠sicas ou empresas
            if "pessoas f√≠sicas" in question_lower:
                # Heur√≠stica para pessoas f√≠sicas
                mask = ~df_clean['NOME_INFRATOR'].str.contains(r'(LTDA|S\.A\.|S/A|EMPRESA|CIA|COMPANHIA)', case=False, na=False)
                df_filtered = df_clean[mask & df_clean['NOME_INFRATOR'].str.contains(' ', na=False)]
                entity_type = "Pessoas F√≠sicas"
            elif "empresas" in question_lower:
                # Heur√≠stica para empresas
                mask = df_clean['NOME_INFRATOR'].str.contains(r'(LTDA|S\.A\.|S/A|EMPRESA|CIA|COMPANHIA)', case=False, na=False)
                df_filtered = df_clean[mask]
                entity_type = "Empresas"
            else:
                df_filtered = df_clean
                entity_type = "Infratores"
            
            if df_filtered.empty:
                return {"answer": f"‚ùå Nenhuma {entity_type.lower()} encontrada.", "source": "error"}
            
            # Top N
            import re
            numbers = re.findall(r'\d+', question_lower)
            top_n = int(numbers[0]) if numbers else 10
            
            # Conta infra√ß√µes √∫nicas por infrator se NUM_AUTO_INFRACAO dispon√≠vel
            if 'NUM_AUTO_INFRACAO' in df_filtered.columns:
                top_offenders = df_filtered.groupby('NOME_INFRATOR')['NUM_AUTO_INFRACAO'].nunique().nlargest(top_n)
                method_info = "infra√ß√µes √∫nicas"
            else:
                top_offenders = df_filtered['NOME_INFRATOR'].value_counts().head(top_n)
                method_info = "registros"
            
            answer = f"**üë• Top {top_n} {entity_type} com Mais Infra√ß√µes ({method_info}):**\n\n"
            
            for i, (name, count) in enumerate(top_offenders.items(), 1):
                # Informa√ß√µes adicionais do infrator
                offender_data = df_filtered[df_filtered['NOME_INFRATOR'] == name]
                ufs = offender_data['UF'].unique() if 'UF' in offender_data.columns else []
                
                # Trunca nome se muito longo
                display_name = name[:40] + "..." if len(name) > 40 else name
                
                answer += f"{i}. **{display_name.title()}**\n"
                suffix = " √∫nicas" if "√∫nicas" in method_info else ""
                answer += f"   ‚Ä¢ Infra√ß√µes: {count:,}{suffix}\n"
                if len(ufs) > 0:
                    answer += f"   ‚Ä¢ Estados: {', '.join(ufs[:3])}{'...' if len(ufs) > 3 else ''}\n\n"
                else:
                    answer += "\n"
            
            return {"answer": answer, "source": "data_analysis"}
            
        except Exception as e:
            return {"answer": f"‚ùå Erro na an√°lise de infratores: {e}", "source": "error"}
    
    def _explain_concepts_or_entities(self, question: str) -> Dict[str, Any]:
        """Explica conceitos ou entidades espec√≠ficas."""
        question_lower = question.lower()
        
        if "vale" in question_lower:
            return {
                "answer": """**‚õ∞Ô∏è Vale S.A.:**

**Nome oficial:** Vale S.A. (antiga Companhia Vale do Rio Doce)

**Sobre a empresa:**
‚Ä¢ Uma das maiores mineradoras do mundo
‚Ä¢ Maior produtora de min√©rio de ferro e n√≠quel
‚Ä¢ Fundada em 1942, privatizada em 1997
‚Ä¢ Sede no Rio de Janeiro

**Rela√ß√£o com o IBAMA:**
‚Ä¢ Licenciamento de projetos de minera√ß√£o
‚Ä¢ Monitoramento de impactos ambientais
‚Ä¢ Fiscaliza√ß√£o de barragens de rejeitos
‚Ä¢ Controle de desmatamento e recupera√ß√£o

**Principais quest√µes ambientais:**
‚Ä¢ Rompimento de barragens (Mariana 2015, Brumadinho 2019)
‚Ä¢ Impactos na qualidade da √°gua
‚Ä¢ Desmatamento para minera√ß√£o
‚Ä¢ Polui√ß√£o do ar por particulados

*A Vale frequentemente aparece em processos do IBAMA devido ao porte de suas opera√ß√µes de minera√ß√£o e hist√≥rico de acidentes ambientais.*""",
                "source": "knowledge_base"
            }
        
        elif "infra√ß√µes contra fauna" in question_lower:
            return {
                "answer": """**üêæ Infra√ß√µes Contra a Fauna:**

**Defini√ß√£o:** Crimes que prejudicam animais silvestres e seus habitats naturais.

**Principais tipos:**
‚Ä¢ **Ca√ßa ilegal:** Abate de animais protegidos
‚Ä¢ **Captura:** Retirada de animais da natureza
‚Ä¢ **Comercializa√ß√£o:** Venda de animais ou produtos
‚Ä¢ **Maus-tratos:** Ferimentos ou morte de animais
‚Ä¢ **Destrui√ß√£o de habitat:** Altera√ß√£o de √°reas de reprodu√ß√£o

**Exemplos espec√≠ficos:**
‚Ä¢ Ca√ßa de on√ßas, jaguatiricas, aves raras
‚Ä¢ Captura de papagaios, araras, tucanos
‚Ä¢ Pesca predat√≥ria e em locais proibidos
‚Ä¢ Comercializa√ß√£o de peles, penas, carne
‚Ä¢ Destrui√ß√£o de ninhos e criadouros

**Penalidades (Lei 9.605/98):**
‚Ä¢ Multa: R$ 500 a R$ 5.000 por esp√©cime
‚Ä¢ Deten√ß√£o: 6 meses a 1 ano
‚Ä¢ Apreens√£o dos animais
‚Ä¢ Repara√ß√£o de danos ambientais

**Agravantes:**
‚Ä¢ Esp√©cies amea√ßadas de extin√ß√£o
‚Ä¢ Per√≠odos de reprodu√ß√£o
‚Ä¢ Uso de m√©todos cru√©is
‚Ä¢ Finalidade comercial""",
                "source": "knowledge_base"
            }
        
        else:
            # Chama o m√©todo original para outros conceitos
            return self._explain_concepts(question)
    
    def _analyze_general(self, df: pd.DataFrame, question: str) -> Dict[str, Any]:
        """An√°lise gen√©rica dos dados ou responde perguntas gerais."""
        question_lower = question.lower()
        
        # Perguntas sobre entidades espec√≠ficas
        if "petrobras" in question_lower:
            return {
                "answer": """**üõ¢Ô∏è Petrobras:**

**Nome oficial:** Petr√≥leo Brasileiro S.A.

**Sobre a empresa:**
‚Ä¢ Maior empresa do Brasil e uma das maiores petrol√≠feras do mundo
‚Ä¢ Sociedade an√¥nima de capital misto (p√∫blica e privada)
‚Ä¢ Fundada em 1953 pelo presidente Get√∫lio Vargas
‚Ä¢ Atua em explora√ß√£o, produ√ß√£o, refino e distribui√ß√£o de petr√≥leo

**Rela√ß√£o com o IBAMA:**
‚Ä¢ Licenciamento ambiental para explora√ß√£o de petr√≥leo
‚Ä¢ Monitoramento de impactos ambientais
‚Ä¢ Fiscaliza√ß√£o de vazamentos e acidentes
‚Ä¢ Controle de atividades offshore (mar)

**Principais quest√µes ambientais:**
‚Ä¢ Vazamentos de √≥leo
‚Ä¢ Impactos na fauna marinha
‚Ä¢ Licenciamento de plataformas
‚Ä¢ Recupera√ß√£o de √°reas degradadas

*A Petrobras frequentemente aparece em processos do IBAMA devido ao porte de suas opera√ß√µes e potencial impacto ambiental.*""",
                "source": "knowledge_base"
            }
        
        elif "ibama" in question_lower:
            return {
                "answer": """**üå≥ Instituto Brasileiro do Meio Ambiente (IBAMA):**

**Cria√ß√£o:** 1989, pela Lei 7.735

**Miss√£o:** Proteger o meio ambiente e promover o desenvolvimento sustent√°vel

**Principais fun√ß√µes:**
‚Ä¢ Fiscaliza√ß√£o ambiental
‚Ä¢ Licenciamento de atividades
‚Ä¢ Prote√ß√£o da fauna e flora
‚Ä¢ Controle de produtos qu√≠micos
‚Ä¢ Gest√£o de unidades de conserva√ß√£o

**Tipos de infra√ß√£o:**
‚Ä¢ Contra a fauna (ca√ßa, pesca ilegal)
‚Ä¢ Contra a flora (desmatamento)
‚Ä¢ Polui√ß√£o (√°gua, ar, solo)
‚Ä¢ Atividades sem licen√ßa

**Penalidades:**
‚Ä¢ Multas de R$ 50 a R$ 50 milh√µes
‚Ä¢ Apreens√£o de produtos
‚Ä¢ Embargo de atividades
‚Ä¢ Recupera√ß√£o de danos""",
                "source": "knowledge_base"
            }
        
        else:
            # Resposta gen√©rica com dados dispon√≠veis
            if not df.empty:
                # Conta infra√ß√µes √∫nicas se NUM_AUTO_INFRACAO dispon√≠vel
                if 'NUM_AUTO_INFRACAO' in df.columns:
                    total_records = df['NUM_AUTO_INFRACAO'].nunique()
                    records_type = "infra√ß√µes √∫nicas"
                else:
                    total_records = len(df)
                    records_type = "registros"
                
                total_states = df['UF'].nunique() if 'UF' in df.columns else 0
                
                if 'COD_MUNICIPIO' in df.columns:
                    total_municipalities = df['COD_MUNICIPIO'].nunique()
                elif 'MUNICIPIO' in df.columns:
                    total_municipalities = df['MUNICIPIO'].nunique()
                else:
                    total_municipalities = 0
                
                answer = f"üìä **Sistema de An√°lise IBAMA:**\n\n"
                answer += f"Tenho {total_records:,} {records_type} dispon√≠veis para an√°lise.\n\n"
                answer += f"**Dados incluem:**\n"
                answer += f"‚Ä¢ {total_states} estados brasileiros\n"
                answer += f"‚Ä¢ {total_municipalities:,} munic√≠pios afetados\n"
                answer += f"‚Ä¢ Per√≠odo: 2024-2025\n"
                answer += f"‚Ä¢ Valores de multas, tipos de infra√ß√£o, gravidade\n\n"
                
                answer += f"**Posso ajudar com:**\n"
                answer += f"‚Ä¢ An√°lise por estado/munic√≠pio\n"
                answer += f"‚Ä¢ Valores e estat√≠sticas de multas\n"
                answer += f"‚Ä¢ Tipos de infra√ß√µes mais comuns\n"
                answer += f"‚Ä¢ Distribui√ß√£o por gravidade\n"
                answer += f"‚Ä¢ Conceitos ambientais (biopirataria, OGMs)\n"
                answer += f"‚Ä¢ Informa√ß√µes sobre IBAMA e legisla√ß√£o\n\n"
                
                answer += f"**Exemplo:** 'Quais s√£o os 5 estados com mais infra√ß√µes?'"
            else:
                answer = "‚ùå N√£o foi poss√≠vel carregar os dados para an√°lise."
            
            return {"answer": answer, "source": "data_analysis"}
    
    def _add_ai_warning(self, answer: str, source: str) -> str:
        """Adiciona aviso sobre IA a todas as respostas."""
        # Sempre adiciona o aviso, independente da fonte
        warning = "\n\n‚ö†Ô∏è **Aviso Importante:** Todas as respostas precisam ser checadas. Os modelos de IA podem ter erros de alucina√ß√£o, baixa qualidade em certos pontos, vieses ou problemas √©ticos."
        
        # Adiciona informa√ß√£o sobre a fonte
        if source == "data_analysis":
            source_info = "\n\n*üí° Resposta baseada em an√°lise direta dos dados*"
        elif source == "knowledge_base":
            source_info = "\n\n*üìö Resposta baseada em conhecimento especializado*"
        elif source == "llm":
            model_name = "Llama 3.1" if self.llm_config["provider"] == "groq" else "Gemini 1.5"
            source_info = f"\n\n*ü§ñ Resposta gerada por {model_name}*"
        else:
            source_info = ""
        
        return answer + source_info + warning
    
    def query(self, question: str, provider: str = 'direct') -> Dict[str, Any]:
        """Processa uma pergunta do usu√°rio."""
        
        question_lower = question.lower()
        
        # Palavras-chave que indicam perguntas sobre dados ou conceitos (n√£o web)
        data_keywords = [
            "estados", "uf", "munic√≠pios", "cidades", "valor", "multa", 
            "tipo", "infra√ß√£o", "ano", "total", "quantos", "top", "maior", "menor",
            "biopirataria", "org. gen.", "modifica√ß√£o gen√©tica", "organismo",
            "gravidade", "leve", "grave", "grav√≠ssima", "fauna", "flora", 
            "animal", "planta", "ibama", "ambiental", "petrobras", "empresa",
            "pessoa", "infrator", "quem", "qual", "o que √©", "vale", "mineradora",
            "pesca", "amazonas", "rio grande do sul", "pessoas f√≠sicas", "empresas",
            "infra√ß√µes contra", "conceito", "defini√ß√£o"
        ]
        
        # Palavras que realmente precisam de busca web
        web_keywords = [
            "endere√ßo", "telefone", "contato", "site oficial", "hist√≥ria do ibama",
            "quem √© o presidente", "localiza√ß√£o da sede", "como chegar"
        ]
        
        # Se tem palavras web espec√≠ficas, tenta LLM/web
        if any(keyword in question_lower for keyword in web_keywords):
            if self.llm_integration:
                try:
                    return self.llm_integration.query(question, self.llm_config["provider"])
                except Exception as e:
                    return {
                        "answer": f"‚ùå Busca na internet n√£o dispon√≠vel: {str(e)}",
                        "source": "error"
                    }
        
        # Para perguntas sobre dados ou conceitos, usa an√°lise local
        if any(keyword in question_lower for keyword in data_keywords):
            return self._answer_with_data_analysis(question)
        
        # Para perguntas gen√©ricas sobre o sistema, responde diretamente
        if any(keyword in question_lower for keyword in ["o que", "como", "explicar", "definir"]):
            return self._answer_with_data_analysis(question)
        
        # Default: tenta an√°lise local primeiro
        try:
            return self._answer_with_data_analysis(question)
        except Exception as e:
            return {
                "answer": "‚ùå N√£o consegui processar sua pergunta. Tente perguntas sobre:\n\n" +
                         "‚Ä¢ Estados com mais infra√ß√µes\n" +
                         "‚Ä¢ Valores de multas\n" +
                         "‚Ä¢ Tipos de infra√ß√µes\n" +
                         "‚Ä¢ Conceitos como biopirataria\n" +
                         "‚Ä¢ Distribui√ß√£o por gravidade",
                "source": "error"
            }
    
    def display_chat_interface(self):
        """Exibe a interface do chatbot."""
        
        # Header com informa√ß√µes do modelo atual
        col1, col2, col3 = st.columns([2, 1, 1])
        
        with col1:
            st.subheader("üí¨ Chatbot Inteligente")
        
        with col2:
            # Indicador do modelo atual
            model_emoji = "ü¶ô" if self.llm_config["provider"] == "groq" else "üíé"
            model_name = "Llama 3.1" if self.llm_config["provider"] == "groq" else "Gemini 1.5"
            st.caption(f"{model_emoji} Usando: {model_name}")
        
        with col3:
            # Bot√£o para limpar cache
            if st.button("üîÑ Recarregar", help="Limpa cache e recarrega dados"):
                self.cached_data = None
                st.success("Cache limpo!")
        
        # Hist√≥rico de mensagens
        for message in st.session_state.messages:
            with st.chat_message(message["role"]):
                st.markdown(message["content"])
        
        # Input do usu√°rio
        if prompt := st.chat_input("Fa√ßa sua pergunta sobre os dados do IBAMA..."):
            # Adiciona mensagem do usu√°rio
            st.session_state.messages.append({"role": "user", "content": prompt})
            with st.chat_message("user"):
                st.markdown(prompt)
            
            # Processa resposta
            with st.chat_message("assistant"):
                model_emoji = "ü¶ô" if self.llm_config["provider"] == "groq" else "üíé"
                with st.spinner(f"{model_emoji} A IA est√° analisando os dados..."):
                    try:
                        response = self.query(prompt)
                        answer = response.get("answer", "‚ùå N√£o foi poss√≠vel processar sua pergunta.")
                        source = response.get("source", "unknown")
                        
                        # Adiciona aviso obrigat√≥rio sobre IA a TODAS as respostas
                        final_answer = self._add_ai_warning(answer, source)
                        
                        st.markdown(final_answer)
                        
                        # Adiciona ao hist√≥rico
                        st.session_state.messages.append({"role": "assistant", "content": final_answer})
                        
                    except Exception as e:
                        error_msg = f"‚ùå Erro ao processar pergunta: {str(e)}"
                        st.markdown(error_msg)
                        st.session_state.messages.append({"role": "assistant", "content": error_msg})
    
    def display_sample_questions(self):
        """Exibe perguntas de exemplo."""
        with st.expander("üí° Perguntas de Exemplo"):
            
            # Categorias de perguntas
            st.write("**üìä An√°lise de Dados:**")
            data_questions = [
                "Quais s√£o os 5 estados com mais infra√ß√µes?",
                "A maior multa foi de qual pessoa ou empresa?",
                "Top 5 pessoas f√≠sicas com mais infra√ß√µes por Pesca no Amazonas",
                "Top 5 empresas com mais infra√ß√µes por Fauna no RS em 2024"
            ]
            
            for question in data_questions:
                if st.button(question, key=f"data_{hash(question)}"):
                    self._handle_sample_question(question)
            
            st.write("**üß¨ Conceitos e Entidades:**")
            concept_questions = [
                "O que √© biopirataria?",
                "O que √© a Vale?",
                "O que s√£o infra√ß√µes contra fauna?",
                "Como funciona o IBAMA?"
            ]
            
            for question in concept_questions:
                if st.button(question, key=f"concept_{hash(question)}"):
                    self._handle_sample_question(question)
    
    def _handle_sample_question(self, question: str):
        """Manipula clique em pergunta de exemplo."""
        # Adiciona pergunta do usu√°rio
        st.session_state.messages.append({"role": "user", "content": question})
        
        # Processa resposta
        response = self.query(question)
        answer = response.get("answer", "‚ùå Erro ao processar pergunta.")
        source = response.get("source", "unknown")
        
        # Adiciona aviso obrigat√≥rio sobre IA a TODAS as respostas
        final_answer = self._add_ai_warning(answer, source)
        
        st.session_state.messages.append({"role": "assistant", "content": final_answer})
        st.rerun()
